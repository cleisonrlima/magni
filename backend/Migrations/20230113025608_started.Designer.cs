// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230113025608_started")]
    partial class started
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.12");

            modelBuilder.Entity("backend.Models.Course", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("courses");

                    b.HasData(
                        new
                        {
                            id = 1,
                            name = "Ciencia da Computação"
                        },
                        new
                        {
                            id = 2,
                            name = "Direito"
                        });
                });

            modelBuilder.Entity("backend.Models.CourseDiscipline", b =>
                {
                    b.Property<int>("courseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("disciplineId")
                        .HasColumnType("INTEGER");

                    b.HasKey("courseId", "disciplineId");

                    b.HasIndex("disciplineId");

                    b.ToTable("CourseDiscipline");

                    b.HasData(
                        new
                        {
                            courseId = 1,
                            disciplineId = 1
                        },
                        new
                        {
                            courseId = 1,
                            disciplineId = 2
                        },
                        new
                        {
                            courseId = 1,
                            disciplineId = 3
                        },
                        new
                        {
                            courseId = 2,
                            disciplineId = 2
                        },
                        new
                        {
                            courseId = 2,
                            disciplineId = 3
                        });
                });

            modelBuilder.Entity("backend.Models.Discipline", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("teacherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("teacherId");

                    b.ToTable("disciplines");

                    b.HasData(
                        new
                        {
                            id = 1,
                            name = "Logica de Programacao",
                            teacherId = 1
                        },
                        new
                        {
                            id = 2,
                            name = "Matematica I",
                            teacherId = 2
                        },
                        new
                        {
                            id = 3,
                            name = "Propabilidade I",
                            teacherId = 3
                        });
                });

            modelBuilder.Entity("backend.Models.Grade", b =>
                {
                    b.Property<int>("disciplineId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("studentId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("score")
                        .HasColumnType("REAL");

                    b.HasKey("disciplineId", "studentId");

                    b.HasIndex("studentId");

                    b.ToTable("grades");

                    b.HasData(
                        new
                        {
                            disciplineId = 1,
                            studentId = 1,
                            score = 8f
                        },
                        new
                        {
                            disciplineId = 2,
                            studentId = 1,
                            score = 5f
                        },
                        new
                        {
                            disciplineId = 3,
                            studentId = 1,
                            score = 10f
                        },
                        new
                        {
                            disciplineId = 2,
                            studentId = 2,
                            score = 10f
                        },
                        new
                        {
                            disciplineId = 3,
                            studentId = 2,
                            score = 10f
                        });
                });

            modelBuilder.Entity("backend.Models.Student", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("birthDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("courseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("registrationNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("courseId");

                    b.ToTable("students");

                    b.HasData(
                        new
                        {
                            id = 1,
                            birthDate = "14/12/1982",
                            courseId = 1,
                            name = "Cleison Estudante",
                            registrationNumber = "XAXA1234"
                        },
                        new
                        {
                            id = 2,
                            birthDate = "14/12/1982",
                            courseId = 2,
                            name = "Marcelo Pires",
                            registrationNumber = "XAXA2333"
                        });
                });

            modelBuilder.Entity("backend.Models.Teacher", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("birthDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("salaryAmount")
                        .HasColumnType("REAL");

                    b.HasKey("id");

                    b.ToTable("teachers");

                    b.HasData(
                        new
                        {
                            id = 1,
                            birthDate = "14/12/1982",
                            name = "Cleison Lima",
                            salaryAmount = 7000f
                        },
                        new
                        {
                            id = 2,
                            birthDate = "14/12/1982",
                            name = "Marcelo Pires",
                            salaryAmount = 7200f
                        },
                        new
                        {
                            id = 3,
                            birthDate = "14/12/1982",
                            name = "Cristiao Ronaldo",
                            salaryAmount = 2000f
                        });
                });

            modelBuilder.Entity("backend.Models.CourseDiscipline", b =>
                {
                    b.HasOne("backend.Models.Course", "course")
                        .WithMany("courseDisciplines")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Discipline", "discipline")
                        .WithMany("courseDisciplines")
                        .HasForeignKey("disciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("discipline");
                });

            modelBuilder.Entity("backend.Models.Discipline", b =>
                {
                    b.HasOne("backend.Models.Teacher", "teacher")
                        .WithMany()
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("backend.Models.Grade", b =>
                {
                    b.HasOne("backend.Models.Discipline", "discipline")
                        .WithMany("grades")
                        .HasForeignKey("disciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Student", "student")
                        .WithMany("grades")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("discipline");

                    b.Navigation("student");
                });

            modelBuilder.Entity("backend.Models.Student", b =>
                {
                    b.HasOne("backend.Models.Course", "course")
                        .WithMany("students")
                        .HasForeignKey("courseId");

                    b.Navigation("course");
                });

            modelBuilder.Entity("backend.Models.Course", b =>
                {
                    b.Navigation("courseDisciplines");

                    b.Navigation("students");
                });

            modelBuilder.Entity("backend.Models.Discipline", b =>
                {
                    b.Navigation("courseDisciplines");

                    b.Navigation("grades");
                });

            modelBuilder.Entity("backend.Models.Student", b =>
                {
                    b.Navigation("grades");
                });
#pragma warning restore 612, 618
        }
    }
}
